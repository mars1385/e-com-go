// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/mars1385/e-com-go/auth/ent/login"
	"github.com/mars1385/e-com-go/auth/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Login is the model entity for the Login schema.
type Login struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Device holds the value of the "device" field.
	Device string `json:"device,omitempty"`
	// Access holds the value of the "access" field.
	Access string `json:"access,omitempty"`
	// Refresh holds the value of the "refresh" field.
	Refresh string `json:"refresh,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LoginQuery when eager-loading is set.
	Edges        LoginEdges `json:"edges"`
	user_logins  *int
	selectValues sql.SelectValues
}

// LoginEdges holds the relations/edges for other nodes in the graph.
type LoginEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LoginEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Login) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case login.FieldID:
			values[i] = new(sql.NullInt64)
		case login.FieldIP, login.FieldDevice, login.FieldAccess, login.FieldRefresh:
			values[i] = new(sql.NullString)
		case login.FieldCreatedAt, login.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case login.ForeignKeys[0]: // user_logins
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Login fields.
func (l *Login) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case login.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case login.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				l.IP = value.String
			}
		case login.FieldDevice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device", values[i])
			} else if value.Valid {
				l.Device = value.String
			}
		case login.FieldAccess:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access", values[i])
			} else if value.Valid {
				l.Access = value.String
			}
		case login.FieldRefresh:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh", values[i])
			} else if value.Valid {
				l.Refresh = value.String
			}
		case login.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case login.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		case login.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_logins", value)
			} else if value.Valid {
				l.user_logins = new(int)
				*l.user_logins = int(value.Int64)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Login.
// This includes values selected through modifiers, order, etc.
func (l *Login) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Login entity.
func (l *Login) QueryUser() *UserQuery {
	return NewLoginClient(l.config).QueryUser(l)
}

// Update returns a builder for updating this Login.
// Note that you need to call Login.Unwrap() before calling this method if this Login
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Login) Update() *LoginUpdateOne {
	return NewLoginClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Login entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Login) Unwrap() *Login {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Login is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Login) String() string {
	var builder strings.Builder
	builder.WriteString("Login(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("ip=")
	builder.WriteString(l.IP)
	builder.WriteString(", ")
	builder.WriteString("device=")
	builder.WriteString(l.Device)
	builder.WriteString(", ")
	builder.WriteString("access=")
	builder.WriteString(l.Access)
	builder.WriteString(", ")
	builder.WriteString("refresh=")
	builder.WriteString(l.Refresh)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Logins is a parsable slice of Login.
type Logins []*Login
