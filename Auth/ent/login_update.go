// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/mars1385/e-com-go/auth/ent/login"
	"github.com/mars1385/e-com-go/auth/ent/predicate"
	"github.com/mars1385/e-com-go/auth/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginUpdate is the builder for updating Login entities.
type LoginUpdate struct {
	config
	hooks    []Hook
	mutation *LoginMutation
}

// Where appends a list predicates to the LoginUpdate builder.
func (lu *LoginUpdate) Where(ps ...predicate.Login) *LoginUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetIP sets the "ip" field.
func (lu *LoginUpdate) SetIP(s string) *LoginUpdate {
	lu.mutation.SetIP(s)
	return lu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (lu *LoginUpdate) SetNillableIP(s *string) *LoginUpdate {
	if s != nil {
		lu.SetIP(*s)
	}
	return lu
}

// SetDevice sets the "device" field.
func (lu *LoginUpdate) SetDevice(s string) *LoginUpdate {
	lu.mutation.SetDevice(s)
	return lu
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (lu *LoginUpdate) SetNillableDevice(s *string) *LoginUpdate {
	if s != nil {
		lu.SetDevice(*s)
	}
	return lu
}

// SetAccess sets the "access" field.
func (lu *LoginUpdate) SetAccess(s string) *LoginUpdate {
	lu.mutation.SetAccess(s)
	return lu
}

// SetNillableAccess sets the "access" field if the given value is not nil.
func (lu *LoginUpdate) SetNillableAccess(s *string) *LoginUpdate {
	if s != nil {
		lu.SetAccess(*s)
	}
	return lu
}

// SetRefresh sets the "refresh" field.
func (lu *LoginUpdate) SetRefresh(s string) *LoginUpdate {
	lu.mutation.SetRefresh(s)
	return lu
}

// SetNillableRefresh sets the "refresh" field if the given value is not nil.
func (lu *LoginUpdate) SetNillableRefresh(s *string) *LoginUpdate {
	if s != nil {
		lu.SetRefresh(*s)
	}
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LoginUpdate) SetCreatedAt(t time.Time) *LoginUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lu *LoginUpdate) SetNillableCreatedAt(t *time.Time) *LoginUpdate {
	if t != nil {
		lu.SetCreatedAt(*t)
	}
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LoginUpdate) SetUpdatedAt(t time.Time) *LoginUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lu *LoginUpdate) SetNillableUpdatedAt(t *time.Time) *LoginUpdate {
	if t != nil {
		lu.SetUpdatedAt(*t)
	}
	return lu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lu *LoginUpdate) SetUserID(id int) *LoginUpdate {
	lu.mutation.SetUserID(id)
	return lu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (lu *LoginUpdate) SetNillableUserID(id *int) *LoginUpdate {
	if id != nil {
		lu = lu.SetUserID(*id)
	}
	return lu
}

// SetUser sets the "user" edge to the User entity.
func (lu *LoginUpdate) SetUser(u *User) *LoginUpdate {
	return lu.SetUserID(u.ID)
}

// Mutation returns the LoginMutation object of the builder.
func (lu *LoginUpdate) Mutation() *LoginMutation {
	return lu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lu *LoginUpdate) ClearUser() *LoginUpdate {
	lu.mutation.ClearUser()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LoginUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LoginUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LoginUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LoginUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LoginUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(login.Table, login.Columns, sqlgraph.NewFieldSpec(login.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.IP(); ok {
		_spec.SetField(login.FieldIP, field.TypeString, value)
	}
	if value, ok := lu.mutation.Device(); ok {
		_spec.SetField(login.FieldDevice, field.TypeString, value)
	}
	if value, ok := lu.mutation.Access(); ok {
		_spec.SetField(login.FieldAccess, field.TypeString, value)
	}
	if value, ok := lu.mutation.Refresh(); ok {
		_spec.SetField(login.FieldRefresh, field.TypeString, value)
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.SetField(login.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(login.FieldUpdatedAt, field.TypeTime, value)
	}
	if lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   login.UserTable,
			Columns: []string{login.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   login.UserTable,
			Columns: []string{login.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{login.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LoginUpdateOne is the builder for updating a single Login entity.
type LoginUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginMutation
}

// SetIP sets the "ip" field.
func (luo *LoginUpdateOne) SetIP(s string) *LoginUpdateOne {
	luo.mutation.SetIP(s)
	return luo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (luo *LoginUpdateOne) SetNillableIP(s *string) *LoginUpdateOne {
	if s != nil {
		luo.SetIP(*s)
	}
	return luo
}

// SetDevice sets the "device" field.
func (luo *LoginUpdateOne) SetDevice(s string) *LoginUpdateOne {
	luo.mutation.SetDevice(s)
	return luo
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (luo *LoginUpdateOne) SetNillableDevice(s *string) *LoginUpdateOne {
	if s != nil {
		luo.SetDevice(*s)
	}
	return luo
}

// SetAccess sets the "access" field.
func (luo *LoginUpdateOne) SetAccess(s string) *LoginUpdateOne {
	luo.mutation.SetAccess(s)
	return luo
}

// SetNillableAccess sets the "access" field if the given value is not nil.
func (luo *LoginUpdateOne) SetNillableAccess(s *string) *LoginUpdateOne {
	if s != nil {
		luo.SetAccess(*s)
	}
	return luo
}

// SetRefresh sets the "refresh" field.
func (luo *LoginUpdateOne) SetRefresh(s string) *LoginUpdateOne {
	luo.mutation.SetRefresh(s)
	return luo
}

// SetNillableRefresh sets the "refresh" field if the given value is not nil.
func (luo *LoginUpdateOne) SetNillableRefresh(s *string) *LoginUpdateOne {
	if s != nil {
		luo.SetRefresh(*s)
	}
	return luo
}

// SetCreatedAt sets the "created_at" field.
func (luo *LoginUpdateOne) SetCreatedAt(t time.Time) *LoginUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luo *LoginUpdateOne) SetNillableCreatedAt(t *time.Time) *LoginUpdateOne {
	if t != nil {
		luo.SetCreatedAt(*t)
	}
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LoginUpdateOne) SetUpdatedAt(t time.Time) *LoginUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (luo *LoginUpdateOne) SetNillableUpdatedAt(t *time.Time) *LoginUpdateOne {
	if t != nil {
		luo.SetUpdatedAt(*t)
	}
	return luo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (luo *LoginUpdateOne) SetUserID(id int) *LoginUpdateOne {
	luo.mutation.SetUserID(id)
	return luo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (luo *LoginUpdateOne) SetNillableUserID(id *int) *LoginUpdateOne {
	if id != nil {
		luo = luo.SetUserID(*id)
	}
	return luo
}

// SetUser sets the "user" edge to the User entity.
func (luo *LoginUpdateOne) SetUser(u *User) *LoginUpdateOne {
	return luo.SetUserID(u.ID)
}

// Mutation returns the LoginMutation object of the builder.
func (luo *LoginUpdateOne) Mutation() *LoginMutation {
	return luo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (luo *LoginUpdateOne) ClearUser() *LoginUpdateOne {
	luo.mutation.ClearUser()
	return luo
}

// Where appends a list predicates to the LoginUpdate builder.
func (luo *LoginUpdateOne) Where(ps ...predicate.Login) *LoginUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LoginUpdateOne) Select(field string, fields ...string) *LoginUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Login entity.
func (luo *LoginUpdateOne) Save(ctx context.Context) (*Login, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LoginUpdateOne) SaveX(ctx context.Context) *Login {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LoginUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LoginUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LoginUpdateOne) sqlSave(ctx context.Context) (_node *Login, err error) {
	_spec := sqlgraph.NewUpdateSpec(login.Table, login.Columns, sqlgraph.NewFieldSpec(login.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Login.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, login.FieldID)
		for _, f := range fields {
			if !login.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != login.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.IP(); ok {
		_spec.SetField(login.FieldIP, field.TypeString, value)
	}
	if value, ok := luo.mutation.Device(); ok {
		_spec.SetField(login.FieldDevice, field.TypeString, value)
	}
	if value, ok := luo.mutation.Access(); ok {
		_spec.SetField(login.FieldAccess, field.TypeString, value)
	}
	if value, ok := luo.mutation.Refresh(); ok {
		_spec.SetField(login.FieldRefresh, field.TypeString, value)
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.SetField(login.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(login.FieldUpdatedAt, field.TypeTime, value)
	}
	if luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   login.UserTable,
			Columns: []string{login.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   login.UserTable,
			Columns: []string{login.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Login{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{login.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
